* About
Some derivations to use QUIP on my cluster. Note that because of the psuedo-proprietary nature of GAP and some other aspects of this workflow, the sources cannot be provided here.

** Sources
- GAP (Gaussian Approximation Potentials) from [[http://www.libatoms.org/gap/gap_download.html][here]]
    - My own setup used a branch which included support for the TurboSOAP descriptor
- TurboSOAP sources
  - Some explanation of this might be [[https://turbogap.fi/wiki/index.php/Quick_start][found here]]
- [[https://github.com/libAtoms/QUIP][QUIP]] itself
- Fortran XML parser ([[https://github.com/libAtoms/fox][FoX]])
  - This comes with QUIP, as a submodule

I can and will however, provide the directory listing:
#+BEGIN_SRC bash :results raw
tree QUIP -d -L 2
#+END_SRC

#+begin_src bash
QUIP
├── arch
├── bin
│   └── __pycache__
├── build
│   └── linux_x86_64_gfortran
├── doc
│   ├── _static
│   ├── _templates
│   └── Tutorials
├── quippy
│   ├── __pycache__
│   └── quippy
├── share
│   ├── Parameters
│   └── Structures
├── src
│   ├── f90wrap
│   ├── FilePot_drivers
│   ├── fox
│   ├── GAP
│   ├── libAtoms
│   ├── Potentials
│   ├── Programs
│   ├── Structure_processors
│   ├── turbogap
│   └── Utils
├── tests
│   ├── do_not_run
│   └── rules
└── travis

30 directories
#+end_src bash

- Note the additions to the ~src~ folder
- Also, the TurboSOAP sources are ABSOLUTE PATHS for some reason
** Nix Shell
With the derivation in place, we can build and enter the environment.
#+BEGIN_SRC bash
nix-shell -v --run "zsh"
#+END_SRC
Use the following command to find out what to put in  ~MATH_LINKOPTS=~.
#+BEGIN_SRC bash
pkg-config --libs blas
pkg-config --libs lapack
#+END_SRC
With the current ~openblas~ setup, these will both be the same.
** QUIP-GAP
Now we can finally set this up.
#+BEGIN_SRC bash
nix-shell --run "zsh"
mkdir -p out/{bin,structs}
cd QUIP
mkdir -p build/$QUIP_ARCH
cp ../files/$QUIP_ARCH-Makefile.inc build/$QUIP_ARCH/Makefile.inc
make
make install
make install-quippy
make libquip
#+END_SRC
** Nix Shell
To get the integrated build just run:
#+BEGIN_SRC bash
nix-shell --run "zsh"
#+END_SRC
For permission errors use another terminal to run:
#+BEGIN_SRC bash
watch sudo chmod 777 /nix/store/2cg51vw7iws7ayawzwwr7rfv2ix5yws3-python3-3.8.5-env/lib/python3.8/site-packages -R
#+END_SRC
*The shell is required for* ~quippy~.
** Nix Build
After setting up the shell environment, we can build and install the binary.
#+BEGIN_SRC bash
nix-build -v
# Test it
nix-env -i ./result
#+END_SRC
* License
[[http://www.wtfpl.net/about/][WTFPL]]
